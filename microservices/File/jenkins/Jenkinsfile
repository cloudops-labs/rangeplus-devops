pipeline {
   agent any
   
//     environment {
//     //     //showing Git Branch
//         FULL_PATH_BRANCH = "${sh(script:'git name-rev --name-only HEAD', returnStdout: true)}"
//          GIT_BRANCH = FULL_PATH_BRANCH.substring(FULL_PATH_BRANCH.lastIndexOf('/') + 1, FULL_PATH_BRANCH.length())
//     //     //showing Git Commit
//     //     GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
//     //     //showing Git Repo
//          GIT_REPO = 'https://github.com/BoppoTechnologies/Rangeplus-File-Microservice.git'

//     }
    
//   options { 
//      disableConcurrentBuilds() 
//   }


 stages{
     
    stage('SCM Checkout - Prod'){
       steps{
            echo "clean workspace.."
            cleanWs()
        
            echo "Cloning stage branch..."
            git credentialsId: 'git-creds', url: 'https://github.com/BoppoTechnologies/Rangeplus-File-Microservice.git',branch: 'main'

            echo "Changing Env Files...."
            sh "/var/lib/jenkins/workspace/script-prod/rangeplus-file-env.sh"
            sh 'aws s3 cp "s3://rangeplus-cicd-credentials/helm/prod/rangeplus-file/" "rangeplus-file" --recursive '
            sh 'aws s3 cp "s3://rangeplus-cicd-credentials/Microservices/File/Prod/Dockerfile" "Dockerfile" '

        }
    }
    


    stage('Docker Build and Push - Prod'){
        steps{
            echo "Deleting old containers..."
            sh 'docker system prune -a -f --volumes'

            echo "Building docker image..."
            //sh 'docker build -t rangeplus .'

            echo "Push docker image to dockerhub..."
            withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPwd')]){
                sh "docker login -u rangeplus -p ${dockerHUBPwd}"
                sh "docker buildx build --platform linux/arm64 --push -t rangeplus/file:prodV${env.BUILD_NUMBER} ."
                //sh "docker tag rangeplus rangeplus/file:stageV${env.BUILD_NUMBER}"
                //sh "docker push rangeplus/file:stageV${env.BUILD_NUMBER}"
            }
        }
    }
//  stage('Dependency Check Report') {
//         steps {
//             dependencyCheck additionalArguments: ''' 
//                 -o "./" 
//                 -s "./"
//                 -f "ALL" 
//                 --prettyPrint''', odcInstallation: 'dp-check'
//             dependencyCheckPublisher pattern: 'dependency-check-report.xml'
//         }    
//     }
    // stage('Trivy Scan') {
    //     steps {
    //         script {
    //             sh """trivy image --format template --template \"@/data/trivy-main/html.tpl\" --output trivy_report.html rangeplus/file:stageV${env.BUILD_NUMBER} """
    //         }
    //         publishHTML(target: [
    //             allowMissing: true,
    //             alwaysLinkToLastBuild: false,
    //             keepAll: true,
    //             reportDir: ".",
    //             reportFiles: "trivy_report.html",
    //             reportName: "Trivy Report",
    //             ])
    //         }
    // } 
    stage('Build on k8 ') {
       steps{
            sh 'pwd'
            //sh 'cp -R /var/lib/jenkins/workspace/helm/* .'
		    sh 'ls -ltr'
            sh 'pwd'
            sh "/usr/local/bin/helm upgrade --install rangeplus-file-prod-release rangeplus-file --set image.repository=rangeplus/file --set image.tag=prodV${env.BUILD_NUMBER}"
 
        }
    }

  }


// post {
     
//      success {
//          slackSend color: "good", message: "Status: ${currentBuild.result}\n | Job: ${env.JOB_NAME}\n | Build Number: ${env.BUILD_NUMBER}\n | Git Branch: ${env.GIT_BRANCH} | Git Repo: ${env.GIT_REPO}\n"
//      }
//      failure {
//          slackSend color: "danger", message: "Status: ${currentBuild.result}\n | Job: ${env.JOB_NAME}\n | Build number: ${env.BUILD_NUMBER}\n | Git Branch: ${env.GIT_BRANCH}\n | Git Repo: ${env.GIT_REPO}\n"
//      }
//     aborted {
//             slackSend color: "warning", message: "Status: PIPELINE ${currentBuild.result} | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}"
//     }
//  }
 
}
