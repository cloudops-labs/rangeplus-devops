pipeline {
    agent any
    
// environment {
//          //showing Git Branch
//         FULL_PATH_BRANCH = "${sh(script:'git name-rev --name-only HEAD', returnStdout: true)}"
//         GIT_BRANCH = FULL_PATH_BRANCH.substring(FULL_PATH_BRANCH.lastIndexOf('/') + 1, FULL_PATH_BRANCH.length())
//          //showing Git Commit
//          GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
//          //showing Git Repo
//          GIT_REPO = 'https://github.com/BoppoTechnologies/Rangeplus-Customer-Microservice.git'
//          GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
//         }
    
// options { 
//     disableConcurrentBuilds() 
// }


    stages{

        // stage('get_commit_msg') {
        //     steps {
        //         script {
        //             env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
        //             //env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_ID}', returnStdout: true).trim()
        //             env.GIT_COMMIT = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
        //             }
        //         }
        //     }


        stage('SCM Checkout - Prod'){
            steps{

                echo "clean workspace.."
                cleanWs()
        
                echo "Cloning prod branch..."
                git credentialsId: 'git-creds', url: 'https://github.com/BoppoTechnologies/Rangeplus-Customer-Microservice.git',branch: 'main'

                echo "Changing Env Files...."
                sh "/var/lib/jenkins/workspace/script-prod/rangeplus-customer-env.sh"
                sh 'aws s3 cp "s3://rangeplus-cicd-credentials/Microservices/Customer/Prod/Dockerfile" "Dockerfile" '
                sh 'aws s3 cp "s3://rangeplus-cicd-credentials/helm/prod/rangeplus-customer/" "rangeplus-customer" --recursive '
                sh 'aws s3 cp "s3://rangeplus-cicd-credentials/Microservices/Customer/Prod/cert/private.key" "/var/lib/jenkins/workspace/rangeplus-customer-microservice-prod/cert/private.key" '
                sh 'aws s3 cp "s3://rangeplus-cicd-credentials/Microservices/Customer/Prod/cert/public.key" "/var/lib/jenkins/workspace/rangeplus-customer-microservice-prod/cert/public.key" '
            }
        }
    
    stage('Docker Build and Push - Prod'){
        steps{

            echo "Deleting old containers..."
            sh 'docker system prune -a -f --volumes'
    
            echo "Building docker image..."
            //sh 'docker build -t rangeplus .'
    
            echo "Push docker image to dockerhub..."
            withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPwd')])
            {
                sh "docker login -u rangeplus -p ${dockerHUBPwd}"
                sh "docker buildx build --platform linux/arm64 --push -t rangeplus/customer:prodV${env.BUILD_NUMBER} ."
                //sh "docker tag rangeplus rangeplus/customer:stageV${env.BUILD_NUMBER}"
               // sh "docker push rangeplus/customer:stageV${env.BUILD_NUMBER}"
            }

         }
    }

    //stage('Deploying App to Kubernetes - Stage'){
        //steps {
        //echo "Deploy to stage eks cluster..."
        //sh 'kubectl delete -f deployment.yaml'
        //sh 'kubectl apply -f deployment.yaml'
        //sh 'kubectl apply -f service.yaml'
       // }
   // }   
//  stage('Dependency Check Report') {
//         steps {
//             dependencyCheck additionalArguments: ''' 
//                 -o "./" 
//                 -s "./"
//                 -f "ALL" 
//                 --prettyPrint''', odcInstallation: 'dp-check'
//             dependencyCheckPublisher pattern: 'dependency-check-report.xml'
//         }    
//     }
    // stage('Trivy Scan') {
    //     steps {
    //         script {
    //             sh """trivy image --format template --template \"@/data/trivy-main/html.tpl\" --output trivy_report.html rangeplus/customer:stageV${env.BUILD_NUMBER} """
    //         }
    //         publishHTML(target: [
    //             allowMissing: true,
    //             alwaysLinkToLastBuild: false,
    //             keepAll: true,
    //             reportDir: ".",
    //             reportFiles: "trivy_report.html",
    //             reportName: "Trivy Report",
    //             ])
    //         }
    // }
    stage('Build on k8 ') {
            steps{
                sh 'pwd'
               // sh 'cp -R /var/lib/jenkins/workspace/helm/* .'
		        sh 'ls -ltr'
                sh 'pwd'
                sh "/usr/local/bin/helm upgrade --install rangeplus-customer-prod-release rangeplus-customer --set image.repository=rangeplus/customer --set image.tag=prodV${env.BUILD_NUMBER}"
            }       
       }

    }
// post {
     
//      success {
//          slackSend color: "good", message: "Status: ${currentBuild.result}\n | Job: ${env.JOB_NAME}\n | Build Number: ${env.BUILD_NUMBER}\n | Git Branch: ${env.GIT_BRANCH} | Git Repo: ${env.GIT_REPO}\n"
//      }
//      failure {
//          slackSend color: "danger", message: "Status: ${currentBuild.result}\n | Job: ${env.JOB_NAME}\n | Build number: ${env.BUILD_NUMBER}\n | Git Branch: ${env.GIT_BRANCH}\n | Git Repo: ${env.GIT_REPO}\n"
//      }
//     aborted {
//             slackSend color: "warning", message: "Status: PIPELINE ${currentBuild.result} | Job: ${env.JOB_NAME} | Build number ${env.BUILD_NUMBER}"
//     }
//  }

}
